"""Initial tables

Revision ID: 2d8b4a45523e
Revises:
Create Date: 2025-04-12 20:15:49.205458

"""

from typing import Sequence, Union

import sqlalchemy as sa
from alembic import op

# revision identifiers, used by Alembic.
revision: str = "2d8b4a45523e"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "author",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("name", sa.String(length=255), nullable=False),
        sa.Column("email", sa.String(length=255), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_author_email"), "author", ["email"], unique=True)
    op.create_index(op.f("ix_author_id"), "author", ["id"], unique=False)
    op.create_table(
        "book",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("isbn", sa.String(length=255), nullable=False),
        sa.Column("title", sa.String(length=255), nullable=False),
        sa.Column("no_of_pages", sa.Integer(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_book_id"), "book", ["id"], unique=False)
    op.create_index(op.f("ix_book_isbn"), "book", ["isbn"], unique=True)
    op.create_table("genre", sa.Column("id", sa.Integer(), autoincrement=True, nullable=False), sa.Column("name", sa.String(length=255), nullable=False), sa.PrimaryKeyConstraint("id"))
    op.create_index(op.f("ix_genre_id"), "genre", ["id"], unique=False)
    op.create_index(op.f("ix_genre_name"), "genre", ["name"], unique=False)
    op.create_table("publisher", sa.Column("id", sa.Integer(), autoincrement=True, nullable=False), sa.Column("name", sa.String(length=255), nullable=False), sa.PrimaryKeyConstraint("id"))
    op.create_index(op.f("ix_publisher_id"), "publisher", ["id"], unique=False)
    op.create_index(op.f("ix_publisher_name"), "publisher", ["name"], unique=False)
    op.create_table(
        "user",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("uuid", sa.UUID(), nullable=False),
        sa.Column("first_name", sa.String(length=255), nullable=False),
        sa.Column("middle_name", sa.String(length=255), nullable=True),
        sa.Column("last_name", sa.String(length=255), nullable=False),
        sa.Column("email", sa.String(length=255), nullable=True),
        sa.Column("password", sa.String(length=255), nullable=False),
        sa.Column("role", sa.String(length=10), nullable=False),
        sa.Column("created_at", sa.DateTime(), server_default=sa.text("CURRENT_TIMESTAMP"), nullable=False),
        sa.Column("updated_at", sa.DateTime(), server_default=sa.text("CURRENT_TIMESTAMP"), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("uuid"),
    )
    op.create_index(op.f("ix_user_email"), "user", ["email"], unique=True)
    op.create_index(op.f("ix_user_id"), "user", ["id"], unique=False)
    op.create_table(
        "borrow",
        sa.Column("book_id", sa.Integer(), nullable=False),
        sa.Column("user_id", sa.UUID(), nullable=False),
        sa.Column("borrowed_date", sa.DateTime(), server_default=sa.text("CURRENT_DATE"), nullable=False),
        sa.Column("actual_return_date", sa.DateTime(), server_default=sa.text("CURRENT_DATE + INTERVAL '10 DAY'"), nullable=False),
        sa.Column("returned_date", sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(
            ["book_id"],
            ["book.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["user.uuid"],
        ),
        sa.PrimaryKeyConstraint("book_id", "user_id"),
    )
    op.create_table(
        "library",
        sa.Column("book_id", sa.Integer(), nullable=False),
        sa.Column("quantity", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ["book_id"],
            ["book.id"],
        ),
        sa.PrimaryKeyConstraint("book_id"),
        sa.UniqueConstraint("book_id"),
    )
    op.create_table(
        "user_fine",
        sa.Column("user_id", sa.UUID(), nullable=False),
        sa.Column("amount", sa.Float(), nullable=False),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["user.uuid"],
        ),
        sa.PrimaryKeyConstraint("user_id"),
        sa.UniqueConstraint("user_id"),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("user_fine")
    op.drop_table("library")
    op.drop_table("borrow")
    op.drop_index(op.f("ix_user_id"), table_name="user")
    op.drop_index(op.f("ix_user_email"), table_name="user")
    op.drop_table("user")
    op.drop_index(op.f("ix_publisher_name"), table_name="publisher")
    op.drop_index(op.f("ix_publisher_id"), table_name="publisher")
    op.drop_table("publisher")
    op.drop_index(op.f("ix_genre_name"), table_name="genre")
    op.drop_index(op.f("ix_genre_id"), table_name="genre")
    op.drop_table("genre")
    op.drop_index(op.f("ix_book_isbn"), table_name="book")
    op.drop_index(op.f("ix_book_id"), table_name="book")
    op.drop_table("book")
    op.drop_index(op.f("ix_author_id"), table_name="author")
    op.drop_index(op.f("ix_author_email"), table_name="author")
    op.drop_table("author")
    # ### end Alembic commands ###
